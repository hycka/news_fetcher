// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsFetcherClient is the client API for NewsFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsFetcherClient interface {
	List(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Posts, error)
	// Search News
	Search(ctx context.Context, in *Keyword, opts ...grpc.CallOption) (*Posts, error)
}

type newsFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsFetcherClient(cc grpc.ClientConnInterface) NewsFetcherClient {
	return &newsFetcherClient{cc}
}

func (c *newsFetcherClient) List(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/news_fetcher.api.NewsFetcher/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsFetcherClient) Search(ctx context.Context, in *Keyword, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/news_fetcher.api.NewsFetcher/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsFetcherServer is the server API for NewsFetcher service.
// All implementations must embed UnimplementedNewsFetcherServer
// for forward compatibility
type NewsFetcherServer interface {
	List(context.Context, *ID) (*Posts, error)
	// Search News
	Search(context.Context, *Keyword) (*Posts, error)
	mustEmbedUnimplementedNewsFetcherServer()
}

// UnimplementedNewsFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedNewsFetcherServer struct {
}

func (UnimplementedNewsFetcherServer) List(context.Context, *ID) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNewsFetcherServer) Search(context.Context, *Keyword) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNewsFetcherServer) mustEmbedUnimplementedNewsFetcherServer() {}

// UnsafeNewsFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsFetcherServer will
// result in compilation errors.
type UnsafeNewsFetcherServer interface {
	mustEmbedUnimplementedNewsFetcherServer()
}

func RegisterNewsFetcherServer(s grpc.ServiceRegistrar, srv NewsFetcherServer) {
	s.RegisterService(&NewsFetcher_ServiceDesc, srv)
}

func _NewsFetcher_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFetcherServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news_fetcher.api.NewsFetcher/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFetcherServer).List(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsFetcher_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keyword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFetcherServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news_fetcher.api.NewsFetcher/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFetcherServer).Search(ctx, req.(*Keyword))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsFetcher_ServiceDesc is the grpc.ServiceDesc for NewsFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "news_fetcher.api.NewsFetcher",
	HandlerType: (*NewsFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _NewsFetcher_List_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _NewsFetcher_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
